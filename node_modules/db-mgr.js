/* PROD */
var prod_host = "";
var prod_user = "";
var prod_pass = "";
var prod_db = "";

/* DEV */
var dev_host = "0.0.0.0";
var dev_user = "quenting";
var dev_pass = "";
var dev_db = "wallet";

var db = null;

var connect = function(_env) {
    var mysql = require('mysql');
    var connection = null;

    if (_env == "DEV") {
        connection = mysql.createPool({
            connectionLimit : 100,
            host: dev_host,
            user: dev_user,
            password: dev_pass,
            database: dev_db
        });
    }
    else {
        connection = mysql.createPool({
            connectionLimit : 100,
            host: prod_host,
            user: prod_user,
            password: prod_pass,
            database: prod_db
        });
    }

    db = connection;
}

var checkLogin = function(_login, _clbk)
{
    var query = "SELECT * FROM user WHERE pass='"+_login+"';";
    db.query(query, function(err, rows) {
        if(_clbk != null)
        {
            _clbk(err, rows);
        }
        else
        {
            displayNullClbk();
        }
        
    });
}

var getMonthPayments = function(_user, _start, _end, _clbk)
{
    
    var query = "";
    query += "SELECT p.id, p.paid_at as date, p.motive, m.value as media, p.value as price FROM payment as p JOIN media as m on p.media_id = m.id ";
    query += "WHERE paid_at >= '"+_start+"' AND paid_at <= '"+_end+"' AND user_id="+_user;
    
    db.query(query, function(err, rows) {
        if(_clbk != null)
        {
            _clbk(err, rows);
        }
        else
        {
            displayNullClbk();
        }
        
    });
}

var getAllMonthPayments = function (_user, _clbk)
{
    var query = "";
    query += "SELECT p.id, p.paid_at as date, p.motive, m.value as media, p.value as price FROM payment as p JOIN media as m on p.media_id = m.id ";
    query += "WHERE user_id="+_user;
    
    db.query(query, function(err, rows) {
        if(_clbk != null)
        {
            _clbk(err, rows);
        }
        else
        {
            displayNullClbk();
        }
        
    });
}

var getMonthClearance = function(_user, _start, _end, _clbk)
{
    var ar_date = _start.split("-");
    var month = ar_date[1];
    if(month < 10) month = "0"+month;
    var year = ar_date[0];
    if(year < 10) year = "0"+year;
    var d = year+"-"+month+"-01";
    
    var clbk = function(err)
    {
        if(err)
        {
            console.log(err);
        }
        
        var query = "";
        query += "SELECT c.value FROM clearance c ";
        query += "WHERE c.month='"+d+"' ";
        query += "AND c.user_id="+_user+" ";
        
        db.query(query, function(err, rows) {
            if(_clbk != null)
            {
                _clbk(err, rows);
            }
            else
            {
                displayNullClbk();
            }
            
        });
    }
    createIfNotExistsMonthClearance(_user, d, clbk);
}

var getAllMonthsClearance = function(_user, _clbk)
{
    var query = "";
    query += "SELECT value, DATE_FORMAT(month, '%Y-%m') as month FROM clearance ";
    query += "WHERE user_id="+_user;
    
    db.query(query, function(err, rows) {
        if(_clbk != null)
        {
            _clbk(err, rows);
        }
        else
        {
            displayNullClbk();
        }
        
    });
}

var getPaymentMedias = function(_clbk)
{
    var query = "SELECT id, value FROM media";
    db.query(query, function(err, rows) {
        if(_clbk != null)
        {
            _clbk(err, rows);
        }
        else
        {
            displayNullClbk();
        }
        
    });
}

var savePayment = function(_user_id, _date, _motive, _media, _amount, _clbk)
{
    var query_p = "";
    query_p += "INSERT INTO payment (user_id, paid_at, value, media_id, motive) VALUES ";
    query_p += "("+_user_id+", '"+_date+"', "+_amount+", "+_media+", '"+_motive+"')";
    
    db.query(query_p, function(err, rows) {
        if(err != null)
        {
            console.log(err);
        }
        
        var ar_date = _date.split("-");
        var month = ar_date[1];
        if(month < 10) month = "0"+month;
        var year = ar_date[0];
        if(year < 10) year = "0"+year;
        var d = year+"-"+month+"-01";
        
        var clbk = function(err)
        {
            if(_clbk != null)
            {
                _clbk(err);
            }
            else
            {
                displayNullClbk();
            }
        }
        createIfNotExistsMonthClearance(_user_id, d, clbk);
        
    });
}

var createIfNotExistsMonthClearance = function(_user_id, _date, _clbk)
{
    // Check if clearance exist
    var query_s = "SELECT id FROM clearance WHERE user_id="+_user_id+" AND month='"+_date+"'";
    db.query(query_s, function(err, rows) {
        if(err != null)
        {
            console.log(err);
        }
        // If yes, update the clearance
        if(rows.length > 0)
        {
            if(_clbk != null)
            {
                _clbk(err);
            }
            else
            {
                displayNullClbk();
            }
        }
        // If not
        else
        {
            // Get the budget for the user
            var query = "SELECT value FROM param WHERE user_id="+_user_id+" AND p='budget'";
            db.query(query, function(err, rows) {
                if(err != null)
                {
                    console.log(err);
                }
                
                if(rows.length > 0)
                {
                    // Insert new clearance
                    var value = rows[0].value; 
                    var query_i = "INSERT INTO clearance(month, value, user_id) VALUES ('"+_date+"', "+value+", "+_user_id+")";
                    db.query(query_i, function(err, rows) {
                        if(_clbk != null)
                        {
                            _clbk(err);
                        }
                        else
                        {
                            displayNullClbk();
                        }
                    });
                }
                else
                {
                    _clbk("No budget for this user in database");
                }
            });
        }
    });
}

var getMonthPaymentsAndClearance = function(_user_id, _start, _end, _clbk)
{
    var query = "";
    query += "SELECT "
    query += "SUM(CASE WHEN p.paid_at >= '"+_start+"' AND p.paid_at <= '"+_end+"' THEN p.value ELSE 0 END) as payments, ";
    query += "c.value as clearance ";
    query += "FROM user as u ";
    query += "LEFT JOIN clearance as c ON c.user_id = u.id ";
    query += "LEFT JOIN payment as p ON p.user_id  = u.id ";
    query += "WHERE u.id = "+_user_id+" ";
    query += "AND c.month = '"+_start+"'; ";
    
    db.query(query, function(err, rows) {
         if(_clbk != null)
        {
            _clbk(err, rows);
        }
        else
        {
            displayNullClbk();
        }
    });
}

var getPaymentsSumAndCountByDayForMonth = function(_user_id, _start, _end, _clbk)
{
    var query = "";
    query += "SELECT SUM(p.value) as sum, COUNT(p.id) as nb, DATE_FORMAT(paid_at, '%Y-%m-%d') as date ";
    query += "FROM payment as p ";
    query += "WHERE p.user_id = "+_user_id+" ";
    query += "AND p.paid_at >= '"+_start+"' ";
    query += "AND p.paid_at <= '"+_end+"' ";
    query += "GROUP BY p.paid_at ";
    query += "ORDER BY p.paid_at ASC;";
    
    db.query(query, function(err, rows) {
         if(_clbk != null)
        {
            _clbk(err, rows);
        }
        else
        {
            displayNullClbk();
        }
    });
    
}

var getUserBudget = function(_user, _clbk)
{
    var query = "SELECT value FROM param WHERE p='budget' AND user_id="+_user+";";
    db.query(query, function(err, rows) {
         if(_clbk != null)
        {
            _clbk(err, rows);
        }
        else
        {
            displayNullClbk();
        }
    });
}

var insertUserBudget = function(_user, _value, _clbk)
{
    var query = "INSERT INTO param(p, user_id, value) VAUES ('budget', "+_user+", "+_value+");";
    db.query(query, function(err, rows) {
         if(_clbk != null)
        {
            _clbk(err, rows);
        }
        else
        {
            displayNullClbk();
        }
    });
}

var updateUserBudget = function(_user, _value, _clbk)
{
    var query = "UPDATE param SET value="+_value+" WHERE p='budget' AND user_id="+_user+";";
    db.query(query, function(err, rows) {
         if(_clbk != null)
        {
            _clbk(err, rows);
        }
        else
        {
            displayNullClbk();
        }
    });
}

var updateUserPwd = function(_user, _new, _clbk)
{
    var query = "UPDATE user SET pass='"+_new+"' WHERE id="+_user+";";
    db.query(query, function(err, rows) {
         if(_clbk != null)
        {
            _clbk(err, rows);
        }
        else
        {
            displayNullClbk();
        }
    });
}

var getMonthList = function(_user, _clbk)
{
    var query = "SELECT DATE_FORMAT(month, '%Y-%m') as month FROM clearance WHERE user_id="+_user+";";
    db.query(query, function(err, rows) {
         if(_clbk != null)
        {
            _clbk(err, rows);
        }
        else
        {
            displayNullClbk();
        }
    });
}

var displayNullClbk = function()
{
    console.log("DB-MGR : Callback is null...");
}

exports.connect = connect;
exports.checkLogin = checkLogin;
exports.getMonthPayments = getMonthPayments;
exports.getAllMonthPayments = getAllMonthPayments;
exports.getMonthClearance = getMonthClearance;
exports.getAllMonthsClearance = getAllMonthsClearance;
exports.savePayment = savePayment;
exports.createIfNotExistsMonthClearance = createIfNotExistsMonthClearance;
exports.getPaymentMedias = getPaymentMedias;
exports.getMonthPaymentsAndClearance = getMonthPaymentsAndClearance;
exports.getPaymentsSumAndCountByDayForMonth = getPaymentsSumAndCountByDayForMonth;
exports.getUserBudget = getUserBudget;
exports.insertUserBudget = insertUserBudget;
exports.updateUserBudget = updateUserBudget;
exports.updateUserPwd = updateUserPwd;
exports.getMonthList = getMonthList;
exports.displayNullClbk = displayNullClbk;
